**************************************main.cpp************************************
//ЗАДАНИЕ 1.
//В ранее созданный класс String добавьте перегрузку[], (), преобразования типа к int:
//[] — возвращает элемент по указанному индексу;
//() — ищет символ в строке, если символ есть, возвращает индекс, если нет –1.
//Преобразование к int возвращает длину строк

#include <iostream>
#include "string.h"
using namespace std;

int main()
{
    String string1("Hello world!");
    
    int k = 6;
    
    cout << "Symbol number " << k + 1 << " is - " << string1[k] << endl;

    char symb1 = '!';
    char symb2 = '?';

    cout << "Symbol " << symb1 << " finded in " << string1(symb1) << " index." << endl;
    cout << "Symbol " << symb2 << " didn't find in this string (code " << string1(symb2) << ")." << endl;
    
    cout << "Convert string to int: " << (int)string1 << endl;

    return 0;
}
**************************************string.h**************************************
#pragma once
#include <iostream>
using namespace std;

class String
{
private:
	char* array = nullptr;
	int  size = 80;
	static int counter;
public:
	String();
	String(const int size);
	String(const char* const str);
	String(const String& str);
	String(String&& str);
	static int sizeString(const char* const str);
	void showString() const;
	void inputString();
	static int CountStr();
	String operator*(const String& str);
	char operator[](const int index);
	int operator()(const char symbol);
	operator int() const;
	~String();
};
*************************************string.cpp***************************************
#include "string.h"

String::String()
{
	this->array = new char[this->size];
	cout << "Creating () " << "size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
	++counter;
}

String::String(const int size) : size{ size }
{
	this->array = new char[this->size];
	cout << "Creating (const int size) " << "size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
	++counter;
}

String::String(const char* const str) : size{ sizeString(str) }
{
	this->array = new char[this->size];
	strcpy_s(array, this->size, str);
	cout << "Creating (const char* const str) " << "size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
	++counter;
}

String::String(const String& str) : size{ str.size }
{
	this->array = new char[this->size];
	strcpy_s(array, this->size, str.array);
	cout << "Creating (const String& str) " << "size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
	++counter;
}

String::String(String&& str) : array{ str.array }, size{ str.size }
{
	str.array = nullptr;
	str.size = 0;
	cout << "Removing constructor, size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
}

int String::sizeString(const char* const str)
{
	return strlen(str) + 1;
}

void String::showString() const
{
	cout << this->array << endl;
}

void String::inputString()
{
	cout << "Enter new string: ";
	cin.getline(this->array, 2048);
}

int String::CountStr()
{
	return counter;
}

String String::operator*(const String& str)
{
	int maxLenght = 0;
	int counter = 0;

	if (strlen(this->array) >= strlen(str.array))
	{
		maxLenght = strlen(this->array);
	}
	else
	{
		maxLenght = strlen(str.array);
	}

	char* mass = new char[maxLenght + 1];
	for (int i = 0; i < strlen(this->array); ++i)
	{
		for (int j = 0; j < strlen(str.array); j++)
		{
			if (this->array[i] == str.array[j])
			{
				mass[counter] = str.array[j];
				++counter;
			}
		}
	}
	mass[counter] = '\0';

	cout << this->array << "*" << str.array << "=" << mass << endl;
	return String(mass);
}

char String::operator[](const int index)
{
	return this->array[index];
}

int String::operator()(const char symbol)
{
	for (int i = 0; i < this->size; i++)
	{
		if (symbol == this->array[i])
		{
			return i + 1;
		}
	}
	return -1;
}

String::operator int() const
{
	return this->size - 1;
}

String::~String()
{
	if (this->size > 0)
	{
		cout << "Deleting " << strlen(this->array) << " ";
		for (int i = 0; i < strlen(this->array); i++)
		{
			cout << this->array[i];
		}
		cout << endl;
		delete[] this->array;
	}
}

int String::counter = 0;