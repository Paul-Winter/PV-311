*****************************************main.cpp*************************************
//ЗАДАНИЕ 1.
//Добавить в уже существующий класс String конструктор переноса.
//ЗАДАНИЕ 2.
//Добавить в уже существующий класс Array конструктор переноса.

#include <iostream>
#include "string.h"
#include "array.h"
using namespace std;

int main()
{
    cout << "STRING:" << endl;
    String string1("Hello world!");
    String string2{ string1 };
    String string3("New word");
    String string4 = string1 * string3;
    String string5{ move(string1) }; //переводим в rvalue для сработки конструктора перемещения

    cout << "Creating " << String::CountStr() << " objects." << endl;

    string2.showString();
    string2.inputString();
    string2.showString();

    cout << "\nARRAY:" << endl;
    
    Array arr(10);
    arr.display();

    Array arr1{ move(arr)}; //переводим в rvalue для сработки конструктора перемещения
    arr1.display();

    return 0;
}
******************************************string.h***********************************
#pragma once
#include <iostream>
using namespace std;

class String
{
private:
	char* array = nullptr;
	int  size = 80;
	static int counter;
public:
	String();
	String(const int size);
	String(const char* const str);
	String(const String& str);
	String(String&& str);
	static int sizeString(const char* const str);
	void showString() const;
	void inputString();
	static int CountStr();
	String operator*(const String& str);
	~String();
};
******************************************string.cpp*************************************
#include "string.h"

String::String()
{
	this->array = new char[this->size];
	cout << "Creating () " << "size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
	++counter;
}

String::String(const int size) : size{ size }
{
	this->array = new char[this->size];
	cout << "Creating (const int size) " << "size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
	++counter;
}

String::String(const char* const str) : size{ sizeString(str) }
{
	this->array = new char[this->size];
	strcpy_s(array, this->size, str);
	cout << "Creating (const char* const str) " << "size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
	++counter;
}

String::String(const String& str) : size{ str.size }
{
	this->array = new char[this->size];
	strcpy_s(array, this->size, str.array);
	cout << "Creating (const String& str) " << "size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
	++counter;
}

String::String(String&& str) : array{ str.array }, size{ str.size }
{
	str.array = nullptr;
	str.size = 0;
	cout << "Removing constructor, size=" << strlen(this->array) << ", string: ";
	for (int i = 0; i < strlen(this->array); i++)
	{
		cout << this->array[i];
	}
	cout << endl;
}

int String::sizeString(const char* const str)
{
	return strlen(str) + 1;
}

void String::showString() const
{
	cout << this->array << endl;
}

void String::inputString()
{
	cout << "Enter new string: ";
	cin.getline(this->array, 2048);
}

int String::CountStr()
{
	return counter;
}

String String::operator*(const String& str)
{
	int maxLenght = 0;
	int counter = 0;

	if (strlen(this->array) >= strlen(str.array))
	{
		maxLenght = strlen(this->array);
	}
	else
	{
		maxLenght = strlen(str.array);
	}

	char* mass = new char[maxLenght + 1];
	for (int i = 0; i < strlen(this->array); ++i)
	{
		for (int j = 0; j < strlen(str.array); j++)
		{
			if (this->array[i] == str.array[j])
			{
				mass[counter] = str.array[j];
				++counter;
			}
		}
	}
	mass[counter] = '\0';

	cout << this->array << "*" << str.array << "=" << mass << endl;
	return String(mass);
}

String::~String()
{
	if (this->size > 0)
	{
		cout << "Deleting " << strlen(this->array) << " ";
		for (int i = 0; i < strlen(this->array); i++)
		{
			cout << this->array[i];
		}
		cout << endl;
		delete[] this->array;
	}	
}

int String::counter = 0;
*******************************************array.h**********************************
#pragma once
#include <iostream>
using namespace std;

class Array
{
private:
	
	int size;
	int* mass;
	int countSize(int* mass);
	void fillRandom();

public:
	
	Array();
	Array(int size);
	Array(Array&& object);
	~Array();
	void display();

};
*****************************************array.cpp***************************************
#include "array.h"

int Array::countSize(int* mass)
{
    
    return _msize(mass) / 4;
}

void Array::fillRandom()
{
    for (int i{ 0 }; i < size; ++i)
    {
        this->mass[i] = rand() % 10;
    }
}

Array::Array() : Array(0)
{

}

Array::Array(int size) : mass{ new int[size] {} }, size{ size }
{
    fillRandom();
}

Array::Array(Array&& object) : mass{ object.mass }, size{ object.size }
{
    cout << "Removing constructor, size=" << this->size << ", ";
    display();
    object.mass = nullptr;
    object.size = 0;
}

Array::~Array()
{
    cout << "Deleting ";
    display();
    delete[] mass;
}

void Array::display()
{
    for (int i =  0; i < size; ++i)
    {
        cout << this->mass[i] << ' ';
    }
    cout << endl;
}